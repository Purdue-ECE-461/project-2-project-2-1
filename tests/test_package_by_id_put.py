from app_api_requests.datastore_client_factory import get_datastore_client
from tests.test_utils import setup_test_datastore, generate_header, clear_registry
import requests
import pytest

# Update Package: "200: Success"
def test_update_package_put():
    client = get_datastore_client()
    clear_registry()

    # Upload/Create the package
    header = generate_header()
    query = {
        "metadata": {
            "Name": "FreeCodeCamp",
            "Version": "1.0.0",
            "ID": "freeCodeCamp"
        },
        "data": {
            "Content": "",
            "JSProgram": "if (process.argv.length === 7) {\nconsole.log('\''Success'\'')\nprocess.exit(0)\n} else {\nconsole.log('\''Failed'\'')\nprocess.exit(1)\n}\n"
        }
    }
    response = requests.post('http://127.0.0.1:8080/package', headers=header, json=query)
    assert response.status_code == 201

    # Now try to UPDATE the package (update the content ... by removing it)
    header = generate_header()
    query = {
        "metadata": {
            "Name": "FreeCodeCamp",
            "Version": "1.0.0",
            "ID": "freeCodeCamp"
        },
        "data": {
            "Content": "updated content",
            "URL":  'https://github.com/freeCodeCamp/freeCodeCamp',
            "JSProgram": "if (process.argv.length === 7) {\nconsole.log('\''Success'\'')\nprocess.exit(0)\n} else {\nconsole.log('\''Failed'\'')\nprocess.exit(1)\n}\n"
        }
    }
    response = requests.put('http://127.0.0.1:8080/package/freeCodeCamp', headers=header, json=query)
    assert response.status_code == 200


# Update Package: "400: Malformed request" (No such package)
def test_update_package_put_FAIL400():
    client = get_datastore_client()
    clear_registry() # Clear the Registry
    header = generate_header()

    query = {
        "metadata": {
            "Name": "Doesnotexist",
            "Version": "1.0.0",
            "ID": "doesnotexist"
        },
        "data": {
            "Content": "",
            "JSProgram": "if (process.argv.length === 7) {\nconsole.log('\''Success'\'')\nprocess.exit(0)\n} else {\nconsole.log('\''Failed'\'')\nprocess.exit(1)\n}\n"
        }
    }

    # Now try to UPDATE the package
    response = requests.put('http://127.0.0.1:8080/package/doesnotexist', headers=header, json=query)
    assert response.status_code == 400
    